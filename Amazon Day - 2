4) Most Popular Video Creator

class Solution {
    public List<List<String>> mostPopularCreator(String[] creators, String[] ids, int[] views) {
        

   List<List<String>> res=new ArrayList<>();

   TreeMap<String,Integer> h=new TreeMap<String,Integer>();


   HashMap<String,Integer> videos=new HashMap<String,Integer>();
   for(int i=0;i<creators.length;i++)
   {
         if(!videos.containsKey(creators[i]))
         {
             videos.put(creators[i],i);
         }
         else
         {
           int indx=videos.get(creators[i]);
           if(views[i]>views[indx])
           {
               videos.put(creators[i],i);
           }
           else if(views[i]==views[indx])
           {
               if(ids[i].compareTo(ids[indx])<0)
               {
                   videos.put(creators[i],i);
               }
           }

         }

   }



   int j=0;
   for(String i:creators)
   {
       if(!h.containsKey(i))
       {
           
           h.put(i,0);
       }
       
           h.put(i,h.get(i)+views[j]);


       
       j++;
   }

   PriorityQueue<String> pq=new PriorityQueue<>((a,b)->  h.get(b)==h.get(a)?a.compareTo(b):h.get(b)-h.get(a));
   for( String s:h.keySet())
   {
       pq.add(s);
   }



   int max=h.get(pq.peek());

    while(!pq.isEmpty())
    {
        String s=pq.poll();
        int view=h.get(s);
        if( view==max)
        {
            List<String> l=new ArrayList<String>();
            l.add(s);
            l.add(ids[videos.get(s)]);
            res.add(l);
            max=view;
        }
       


    }
    return  res;




    }
}



5) Number of Matching Subsequences

class Solution {
    public int numMatchingSubseq(String s, String[] words) {
        
    HashMap<Character,Queue<String>> h=new HashMap<Character,Queue<String>>();

    for(int i=0;i<s.length();i++)
    {
        h.putIfAbsent(s.charAt(i),new LinkedList<String>());

    }

    for(String w:words)
    {
   char start=w.charAt(0);
   if(h.containsKey(start))
   {
       h.get(start).offer(w);

    }


    }
    int ans=0;

   for(int i=0;i<s.length();i++)
   {
      char start=s.charAt(i);
      
              Queue<String> q=h.get(start);
              int n=q.size();
              for(int j=0;j<n;j++)
              { 

                     String str=q.poll();
                     if(str.substring(1).length()==0)
                     {
                         ans++;
                     }

                    else  if(h.containsKey(str.charAt(1)))
                    {
                         h.get(str.charAt(1)).offer(str.substring(1));
                    }

              }


      



   }


return ans;
    }
}

6) Top K frequent words

class Pair
{
    String word;
    int count;
    Pair(String word,int count)
    {
    this.word=word;
    this.count=count;
    }
}
class Solution {
    public List<String> topKFrequent(String[] words, int k) {

    PriorityQueue<Pair> pq=new PriorityQueue<Pair>(new Comparator<Pair>()
    {
    public int compare(Pair p1,Pair p2)
    {
        if(p1.count==p2.count)
        return  -p1.word.compareTo(p2.word);
        if(p1.count>p2.count)
        return +1;
        return -1;
    }


    });

    HashMap<String ,Integer> h=new HashMap<String,Integer>();
    for(int i=0;i<words.length;i++)
    {

     if(!h.containsKey(words[i]))
     {
         h.put(words[i],0);
     }
h.put(words[i],h.get(words[i])+1);


    }

    for(String s:h.keySet())
    {

    int rep=h.get(s);
    
    pq.add(new Pair(s,rep));
    if(pq.size()>k)
    pq.poll();


    }
List<String> res=new ArrayList<>();
while(!pq.isEmpty())
{
    res.add(pq.poll().word);
}
Collections.reverse(res);

return res;


    }
}


7) Dota2 Senate
class Solution {
    public String predictPartyVictory(String senate) {
         
          int n=senate.length();
          Queue<Integer> q_r=new LinkedList<Integer>();
          Queue<Integer> q_d=new LinkedList<Integer>();
          for(int i=0;i<n;i++)
          {
              if(senate.charAt(i)=='R')
              {
                  q_r.add(i);
              }
              else
              {
q_d.add(i);
              }
          }


 while(!q_r.isEmpty()&& !q_d.isEmpty())
 {
   int qrindx=q_r.poll();
   int qdindx=q_d.poll();

   if(qrindx>qdindx)
   {
       q_d.add(qdindx+n);
   }
   else
   {
       q_r.add(qrindx+n);
   }



 }
 return  q_r.size()>q_d.size()?"Radiant":"Dire";



    }
}
