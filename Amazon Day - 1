1) Shuffle an array


class Solution {


int[] nums;
int []copy;
Random random;

    public Solution(int[] nums) {

          this.nums=nums;
          random=new Random();

    }
    
    public int[] reset() {
        return nums;

    }
    
    public int[] shuffle() {

copy=nums.clone();
for(int i=nums.length-1;i>0;i--)
{

    int swap=random.nextInt(i+1);
    int temp=copy[swap];
    copy[swap]=copy[i];
    copy[i]=temp;


}





     return copy;

    }
}





2) Cheapest Flights with K stops


class Pair
{
    int to;
    int price;
    Pair(int to,int price)
    {
        this.to=to;
        this.price=price;
    }
}
class Solution {
    int min=Integer.MAX_VALUE;
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        

   //creating adjacency list
   ArrayList<ArrayList<Pair>> al=new ArrayList<ArrayList<Pair>>();
   for(int i=0;i<n;i++)
   {
       al.add(new ArrayList<Pair>());
   }
   int stops[]=new int[n];
   Arrays.fill(stops,Integer.MAX_VALUE);
   

   for(int i=0;i<flights.length;i++)
   {
       al.get(flights[i][0]).add(new Pair(flights[i][1],flights[i][2]));
   }
 int max=Integer.MAX_VALUE;

 PriorityQueue<int[]> pq=new PriorityQueue<int[]>((a,b)->a[1]-b[1]);
 pq.add(new int[]{src,0,0});
 while(!pq.isEmpty())
 {
   int curr[]=pq.poll();
   int currpoint=curr[0];
   int currprice=curr[1];
   int currstops=curr[2];

  if(currstops>stops[currpoint]||currstops>k+1)
  {
      continue;
  }



   stops[currpoint]=currstops;

   if(currpoint==dst)
   {
       return currprice;
   }
   if(al.get(currpoint)==null)
   continue;
 for(Pair p:al.get(currpoint))
 {
      pq.add(new int[]{ p.to,currprice+p.price,currstops+1});

 }


 }




    
    return -1;
    }
}



3) Destroying Asteroids

class Solution {
    public boolean asteroidsDestroyed(int m, int[] asteroids) {
        

      Arrays.sort(asteroids);
      long mass=m;
      for(int i=0;i<asteroids.length;i++)
     {

        if(mass>=asteroids[i])
        {
            mass=mass+asteroids[i];
        }
        else
        {
            return false;
        }



     }
     return true;






    }
}
